{"ast":null,"code":"import { appendErrors, transformToNestObject } from 'react-hook-form';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => Array.isArray(error.details) ? error.details.reduce((previous, {\n  path,\n  message = '',\n  type\n}) => {\n  const currentPath = convertArrayToPathName(path);\n  return Object.assign(Object.assign({}, previous), path ? previous[currentPath] && validateAllFieldCriteria ? {\n    [currentPath]: appendErrors(currentPath, validateAllFieldCriteria, previous, type, message)\n  } : {\n    [currentPath]: previous[currentPath] || Object.assign({\n      message,\n      type\n    }, validateAllFieldCriteria ? {\n      types: {\n        [type]: message || true\n      }\n    } : {})\n  } : {});\n}, {}) : [];\n\nexport const joiResolver = (schema, options = {\n  abortEarly: false\n}) => async (values, context, validateAllFieldCriteria = false) => {\n  try {\n    return {\n      values: await schema.validateAsync(values, Object.assign(Object.assign({}, options), {\n        context\n      })),\n      errors: {}\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria))\n    };\n  }\n};","map":{"version":3,"sources":["../src/joi.ts"],"names":[],"mappings":"AAAA,SACE,YADF,EAEE,qBAFF,QAKO,iBALP;AAOA,OAAO,sBAAP,MAAmC,gCAAnC;;AAEA,MAAM,gBAAgB,GAAG,CACvB,KADuB,EAEvB,wBAFuB,KAIvB,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,OAApB,IACI,KAAK,CAAC,OAAN,CAAc,MAAd,CACE,CAAC,QAAD,EAAgC;AAAE,EAAA,IAAF;AAAQ,EAAA,OAAO,GAAG,EAAlB;AAAsB,EAAA;AAAtB,CAAhC,KAAgE;AAC9D,QAAM,WAAW,GAAG,sBAAsB,CAAC,IAAD,CAA1C;AAEA,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,QADL,CAAA,EAEM,IAAI,GACJ,QAAQ,CAAC,WAAD,CAAR,IAAyB,wBAAzB,GACE;AACE,KAAC,WAAD,GAAe,YAAY,CACzB,WADyB,EAEzB,wBAFyB,EAGzB,QAHyB,EAIzB,IAJyB,EAKzB,OALyB;AAD7B,GADF,GAUE;AACE,KAAC,WAAD,GAAe,QAAQ,CAAC,WAAD,CAAR,IAAqB,MAAA,CAAA,MAAA,CAAA;AAClC,MAAA,OADkC;AAElC,MAAA;AAFkC,KAAA,EAG9B,wBAAwB,GACxB;AACE,MAAA,KAAK,EAAE;AAAE,SAAC,IAAD,GAAQ,OAAO,IAAI;AAArB;AADT,KADwB,GAIxB,EAP8B;AADtC,GAXE,GAsBJ,EAxBN,CAAA;AA0BD,CA9BH,EA+BE,EA/BF,CADJ,GAkCI,EAtCN;;AAwCA,OAAO,MAAM,WAAW,GAAG,CACzB,MADyB,EAEzB,OAAA,GAAsC;AACpC,EAAA,UAAU,EAAE;AADwB,CAFb,KAKE,OAC3B,MAD2B,EAE3B,OAF2B,EAG3B,wBAAwB,GAAG,KAHA,KAIzB;AACF,MAAI;AACF,WAAO;AACL,MAAA,MAAM,EAAE,MAAM,MAAM,CAAC,aAAP,CAAqB,MAArB,EAA2B,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACpC,OADoC,CAAA,EAC7B;AACV,QAAA;AADU,OAD6B,CAA3B,CADT;AAKL,MAAA,MAAM,EAAE;AALH,KAAP;AAOD,GARD,CAQE,OAAO,CAAP,EAAU;AACV,WAAO;AACL,MAAA,MAAM,EAAE,EADH;AAEL,MAAA,MAAM,EAAE,qBAAqB,CAC3B,gBAAgB,CAAC,CAAD,EAAI,wBAAJ,CADW;AAFxB,KAAP;AAMD;AACF,CA1BM","sourceRoot":"","sourcesContent":["import { appendErrors, transformToNestObject, } from 'react-hook-form';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\nconst parseErrorSchema = (error, validateAllFieldCriteria) => Array.isArray(error.details)\n    ? error.details.reduce((previous, { path, message = '', type }) => {\n        const currentPath = convertArrayToPathName(path);\n        return Object.assign(Object.assign({}, previous), (path\n            ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(currentPath, validateAllFieldCriteria, previous, type, message),\n                }\n                : {\n                    [currentPath]: previous[currentPath] || Object.assign({ message,\n                        type }, (validateAllFieldCriteria\n                        ? {\n                            types: { [type]: message || true },\n                        }\n                        : {})),\n                }\n            : {}));\n    }, {})\n    : [];\nexport const joiResolver = (schema, options = {\n    abortEarly: false,\n}) => async (values, context, validateAllFieldCriteria = false) => {\n    try {\n        return {\n            values: await schema.validateAsync(values, Object.assign(Object.assign({}, options), { context })),\n            errors: {},\n        };\n    }\n    catch (e) {\n        return {\n            values: {},\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\n        };\n    }\n};\n//# sourceMappingURL=joi.js.map"]},"metadata":{},"sourceType":"module"}