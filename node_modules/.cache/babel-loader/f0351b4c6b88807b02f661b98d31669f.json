{"ast":null,"code":"import axios, { CancelToken } from 'axios';\nimport queryString from 'query-string';\nimport * as Promise from 'bluebird';\nimport browserHistory from '../history';\nPromise.config({\n  cancellation: true\n}); // If our API is deployed somewhere else, we just have to change the\n// REACT_APP_API_BASE_URL variable in .env file at the root of the project\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  withCredentials: true\n});\n\nconst makeCancellable = (method, url, data, config) => {\n  return new Promise((resolve, reject, onCancel) => {\n    const source = CancelToken.source();\n    instance({\n      method,\n      url,\n      data,\n      cancelToken: source.token,\n      ...config\n    }).then(resolve).catch(thrown => {\n      // Cancellations should not provoque errors.\n      // Only rethrow the non-cancellation related exceptions\n      if (!axios.isCancel(thrown)) throw thrown;\n    }).catch(reject);\n    onCancel(() => {\n      // With bluebird Promises, we've got a cancel() method on Promises !\n      // When it is called, this code runs.\n      // It's the perfect place to cancel the axios\n      // request in order to save bandwidth, CPU and memory :)\n      source.cancel('Request was cancelled');\n    });\n  });\n};\n\nexport const extractData = res => res.data;\nexport const isCancelledError = fetchRequestError => fetchRequestError && fetchRequestError.constructor.name === 'CancelledError';\nexport const getCollection = (collectionName, queryParams, config = {}) => makeCancellable('get', `/${collectionName}${queryParams ? `?${queryString.stringify(queryParams)}` : ''}`, null, config).then(extractData);\nexport const makeEntityAdder = collectionName => (attributes, config = {}) => makeCancellable('post', `/${collectionName}`, attributes, config).then(extractData);\nexport const getEntity = (collectionName, id) => makeCancellable('get', `/${collectionName}/${id}`).then(extractData);\nexport const makeEntityDeleter = collectionName => id => makeCancellable('delete', `/${collectionName}/${id}`).then(extractData);\nexport const makeEntityUpdater = collectionName => (id, attributes) => makeCancellable('patch', `/${collectionName}/${id}`, attributes).then(extractData);\ninstance.interceptors.response.use(res => res, err => {\n  // eslint-disable-next-line\n  console.log('Error while requesting the API : ', err.response);\n\n  if (err.response && err.response.status === 401 && window.location.pathname !== '/login') {\n    browserHistory.push(`/login?redirectPath=${window.location.pathname}`);\n  }\n\n  return Promise.reject(err);\n});\nexport default instance;","map":{"version":3,"sources":["/home/thomas/Project/React/react-website-v1/src/services/API.js"],"names":["axios","CancelToken","queryString","Promise","browserHistory","config","cancellation","instance","create","baseURL","process","env","REACT_APP_API_BASE_URL","withCredentials","makeCancellable","method","url","data","resolve","reject","onCancel","source","cancelToken","token","then","catch","thrown","isCancel","cancel","extractData","res","isCancelledError","fetchRequestError","constructor","name","getCollection","collectionName","queryParams","stringify","makeEntityAdder","attributes","getEntity","id","makeEntityDeleter","makeEntityUpdater","interceptors","response","use","err","console","log","status","window","location","pathname","push"],"mappings":"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","sourcesContent":["import axios, { CancelToken } from 'axios';\nimport queryString from 'query-string';\nimport * as Promise from 'bluebird';\nimport browserHistory from '../history';\n\nPromise.config({\n  cancellation: true,\n});\n\n// If our API is deployed somewhere else, we just have to change the\n// REACT_APP_API_BASE_URL variable in .env file at the root of the project\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  withCredentials: true,\n});\n\nconst makeCancellable = (method, url, data, config) => {\n  return new Promise((resolve, reject, onCancel) => {\n    const source = CancelToken.source();\n    instance({\n      method,\n      url,\n      data,\n      cancelToken: source.token,\n      ...config,\n    })\n      .then(resolve)\n      .catch((thrown) => {\n        // Cancellations should not provoque errors.\n        // Only rethrow the non-cancellation related exceptions\n        if (!axios.isCancel(thrown)) throw thrown;\n      })\n      .catch(reject);\n\n    onCancel(() => {\n      // With bluebird Promises, we've got a cancel() method on Promises !\n      // When it is called, this code runs.\n      // It's the perfect place to cancel the axios\n      // request in order to save bandwidth, CPU and memory :)\n      source.cancel('Request was cancelled');\n    });\n  });\n};\n\nexport const extractData = (res) => res.data;\n\nexport const isCancelledError = (fetchRequestError) =>\n  fetchRequestError && fetchRequestError.constructor.name === 'CancelledError';\n\nexport const getCollection = (collectionName, queryParams, config = {}) =>\n  makeCancellable(\n    'get',\n    `/${collectionName}${\n      queryParams ? `?${queryString.stringify(queryParams)}` : ''\n    }`,\n    null,\n    config\n  ).then(extractData);\n\nexport const makeEntityAdder = (collectionName) => (attributes, config = {}) =>\n  makeCancellable('post', `/${collectionName}`, attributes, config).then(\n    extractData\n  );\n\nexport const getEntity = (collectionName, id) =>\n  makeCancellable('get', `/${collectionName}/${id}`).then(extractData);\n\nexport const makeEntityDeleter = (collectionName) => (id) =>\n  makeCancellable('delete', `/${collectionName}/${id}`).then(extractData);\n\nexport const makeEntityUpdater = (collectionName) => (id, attributes) =>\n  makeCancellable('patch', `/${collectionName}/${id}`, attributes).then(\n    extractData\n  );\n\ninstance.interceptors.response.use(\n  (res) => res,\n  (err) => {\n    // eslint-disable-next-line\n    console.log('Error while requesting the API : ', err.response);\n    if (\n      err.response &&\n      err.response.status === 401 &&\n      window.location.pathname !== '/login'\n    ) {\n      browserHistory.push(`/login?redirectPath=${window.location.pathname}`);\n    }\n    return Promise.reject(err);\n  }\n);\n\nexport default instance;\n"]},"metadata":{},"sourceType":"module"}